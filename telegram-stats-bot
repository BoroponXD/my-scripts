const fs = require('fs');
const axios = require('axios');

const TELEGRAM_BOT_TOKEN = 'YOUR_TOKEN';
const TELEGRAM_CHAT_ID = 'YOUR ID';

let lastMessageId = null;

const readStats = () => {
  try {
    const data = fs.readFileSync('stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read stats.json:', error.message);
    return null;
  }
};

// Saving now stats in the current_stats.json
const saveCurrentStats = (stats) => {
  const data = {
    stats: stats,
    timestamp: Date.now()
  };
  fs.writeFileSync('current_stats.json', JSON.stringify(data, null, 2));
};

// Saving stats for hour ago
const saveHistoryStats = (stats) => {
  const data = {
    stats: stats,
    timestamp: Date.now() // Saving time now
  };
  fs.writeFileSync('history_stats.json', JSON.stringify(data, null, 2));
};

// Getting stats now
const readCurrentStats = () => {
  try {
    const data = fs.readFileSync('current_stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read current_stats.json:', error.message);
    return null;
  }
};

// Getting stats, with check
const readHistoryStats = () => {
  try {
    const data = fs.readFileSync('history_stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read history_stats.json:', error.message);
    return null; // Sends null if no file or just error
  }
};

// To send stats in Telegram
const sendToTelegram = async (currentStats, historyStats) => {
  const currentTime = new Date(currentStats.timestamp).toLocaleString(); // Time now
// One hour ago
  const oneHourAgo = historyStats ? new Date(historyStats.timestamp).toLocaleString() : 'N/A'; // If no data, types "N/A"

  const message = `
üìä **Your Inventory (Current Time: ${currentTime})**:
üíé Gems: ${currentStats.stats.gems}
üçÄ Lucky Potion: ${currentStats.stats.lucky_potion}
‚ö° Speed Potion: ${currentStats.stats.speed_potion}
üî• Ultimate Potion: ${currentStats.stats.ultimate_potion}

---

üïí **Your Inventory (1 Hour Ago: ${oneHourAgo})**:
üíé Gems: ${historyStats ? historyStats.stats.gems : 'N/A'}
üçÄ Lucky Potion: ${historyStats ? historyStats.stats.lucky_potion : 'N/A'}
‚ö° Speed Potion: ${historyStats ? historyStats.stats.speed_potion : 'N/A'}
üî• Ultimate Potion: ${historyStats ? historyStats.stats.ultimate_potion : 'N/A'}
`;

  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    // If there was a message, editing it (it won't edit if u re-launch the bot)
    if (lastMessageId) {
      const editUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`;
      await axios.post(editUrl, {
        chat_id: TELEGRAM_CHAT_ID,
        message_id: lastMessageId, // Editing last message
        text: message
      });
      console.log('‚úÖ Message has been updated!');
    } else {
      // Sending message if it wasn't sent
      const response = await axios.post(url, {
        chat_id: TELEGRAM_CHAT_ID,
        text: message
      });
      lastMessageId = response.data.result.message_id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
      console.log('‚úÖ Message has been sent!');
    }
  } catch (error) {
    console.error('‚ùå Error while trying to send or edit message:', error.response ? error.response.data : error.message);
  }
};

setInterval(() => {
  const stats = readStats();
  if (stats) {
    // Saving to the current_stats.json
    saveCurrentStats(stats);

    // Getting our stats
    const currentStats = readCurrentStats(); // From stats.json, gonna send every 5 minutes
    const historyStats = readHistoryStats(); // Stats one hour ago

    // Sending stats to the telegram
    sendToTelegram(currentStats, historyStats);
  } else {
    console.log('‚ö†Ô∏è No information to send!');
  }
}, 300000); // Every 5 minutes

// Launching interval to update history_stats every hour
setInterval(() => {
  const currentStats = readCurrentStats();
  if (currentStats) {
    // Saving stats history_stats.json
    saveHistoryStats(currentStats.stats);
  } else {
    console.log('‚ö†Ô∏è No information to save in history_stats!');
  }
}, 3600000); // Every Hour 3600000 ms
