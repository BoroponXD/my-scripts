const fs = require('fs');
const axios = require('axios');

const TELEGRAM_BOT_TOKEN = 'YOUR TOKEN';
const TELEGRAM_CHAT_ID = 'YOUR ID';

const readLastMessageId = () => {
  try {
    const data = fs.readFileSync('message_id.json', 'utf8');
    return JSON.parse(data).message_id;
  } catch (error) {
    console.log('‚ö†Ô∏è No previous message_id found or error reading message_id.json:', error.message);
    return null;
  }
};

const saveLastMessageId = (messageId) => {
  fs.writeFileSync('message_id.json', JSON.stringify({ message_id: messageId }, null, 2));
};

let lastMessageId = readLastMessageId();

const formatNumber = (num) => {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
};

const readStats = () => {
  try {
    const data = fs.readFileSync('stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read stats.json:', error.message);
    return null;
  }
};

const saveCurrentStats = (stats) => {
  const data = {
    stats: stats,
    timestamp: Date.now()
  };
  fs.writeFileSync('current_stats.json', JSON.stringify(data, null, 2));
};

const saveHistoryStats = (stats) => {
  const data = {
    stats: stats,
    timestamp: Date.now()
  };
  fs.writeFileSync('history_stats.json', JSON.stringify(data, null, 2));
};

const readCurrentStats = () => {
  try {
    const data = fs.readFileSync('current_stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read current_stats.json:', error.message);
    return null;
  }
};

const readHistoryStats = () => {
  try {
    const data = fs.readFileSync('history_stats.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ö†Ô∏è Error while trying to read history_stats.json:', error.message);
    return null;
  }
};

const deletePreviousMessage = async () => {
  if (lastMessageId) {
    const deleteUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteMessage`;
    try {
      await axios.post(deleteUrl, {
        chat_id: TELEGRAM_CHAT_ID,
        message_id: lastMessageId
      });
      console.log('‚úÖ Previous message deleted!');
    } catch (error) {
      console.error('‚ö†Ô∏è Error while trying to delete previous message:', error.response ? error.response.data : error.message);
    }
  }
};

const sendToTelegram = async (currentStats, historyStats) => {
  const currentTime = new Date(currentStats.timestamp).toLocaleString();
  const oneHourAgo = historyStats ? new Date(historyStats.timestamp).toLocaleString() : 'N/A';

  const message = `
üìä Your Inventory 
   (Time: ${currentTime}):

üíé Gems: ${formatNumber(currentStats.stats.gems)}
üçÄ Lucky Potion: ${formatNumber(currentStats.stats.lucky_potion)}
‚ö° Speed Potion: ${formatNumber(currentStats.stats.speed_potion)}
üî• Ultimate Potion: ${formatNumber(currentStats.stats.ultimate_potion)}

------------------------------------------------------
------------------------------------------------------
------------------------------------------------------

üïí Your Inventory 1 Hour Ago
   (Time: ${oneHourAgo}):

üíé Gems: ${historyStats ? formatNumber(historyStats.stats.gems) : 'N/A'}
üçÄ Lucky Potion: ${historyStats ? formatNumber(historyStats.stats.lucky_potion) : 'N/A'}
‚ö° Speed Potion: ${historyStats ? formatNumber(historyStats.stats.speed_potion) : 'N/A'}
üî• Ultimate Potion: ${historyStats ? formatNumber(historyStats.stats.ultimate_potion) : 'N/A'}
`;

  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    await deletePreviousMessage();

    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message
    });
    lastMessageId = response.data.result.message_id;
    saveLastMessageId(lastMessageId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    console.log('‚úÖ New message has been sent!');
  } catch (error) {
    console.error('‚ùå Error while trying to send message:', error.response ? error.response.data : error.message);
  }
};

const stats = readStats();
if (stats) {
  saveCurrentStats(stats);
  const currentStats = readCurrentStats();
  const historyStats = readHistoryStats();
  sendToTelegram(currentStats, historyStats);
} else {
  console.log('‚ö†Ô∏è No information to send on startup!');
}

setInterval(() => {
  const stats = readStats();
  if (stats) {
    saveCurrentStats(stats);
    const currentStats = readCurrentStats();
    const historyStats = readHistoryStats();
    sendToTelegram(currentStats, historyStats);
  } else {
    console.log('‚ö†Ô∏è No information to send!');
  }
}, 300000);

setInterval(() => {
  const currentStats = readCurrentStats();
  if (currentStats) {
    saveHistoryStats(currentStats.stats);
  } else {
    console.log('‚ö†Ô∏è No information to save in history_stats!');
  }
}, 3600000);
