local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local SETTINGS_FILE = "esp_settings1.json"

local PLAYER_ESP_SETTINGS = {
    enabled = true,
    name = true,
    highlight = true,
    health = true,
    distance = true,
    distanceValue = 300,
    players = {},
    friends = {},
    enemies = {}
}

local connections = {}
local activeListFrames = {}
local activeSetupCoroutines = {}

local function loadSettings()
    if isfile(SETTINGS_FILE) then
        local success, decoded = pcall(HttpService.JSONDecode, HttpService, readfile(SETTINGS_FILE))
        if success and typeof(decoded) == "table" then
            for key, value in pairs(decoded.PLAYER_ESP_SETTINGS or {}) do
                if PLAYER_ESP_SETTINGS[key] ~= nil then
                    PLAYER_ESP_SETTINGS[key] = value
                end
            end
        end
    end
end

loadSettings()

local function saveSettings()
    local settings = {
        PLAYER_ESP_SETTINGS = {
            enabled = PLAYER_ESP_SETTINGS.enabled,
            name = PLAYER_ESP_SETTINGS.name,
            highlight = PLAYER_ESP_SETTINGS.highlight,
            health = PLAYER_ESP_SETTINGS.health,
            distance = PLAYER_ESP_SETTINGS.distance,
            distanceValue = PLAYER_ESP_SETTINGS.distanceValue,
            friends = PLAYER_ESP_SETTINGS.friends,
            enemies = PLAYER_ESP_SETTINGS.enemies
        }
    }
    writefile(SETTINGS_FILE, HttpService:JSONEncode(settings))
end

local gui = Instance.new("ScreenGui")
gui.Name = "ESP"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = PlayerGui

local menu = Instance.new("Frame")
menu.Name = "ESPMenu"
menu.Size = UDim2.new(0.14, 0, 0.32, 0)
menu.Position = UDim2.new(0, 100, 0, 100)
menu.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
menu.BackgroundTransparency = 0.1
menu.BorderSizePixel = 0
menu.Active = true
menu.Draggable = true
menu.Parent = gui

local corner = Instance.new("UIStroke")
corner.Color = Color3.fromRGB(244, 73, 255)
corner.Thickness = 2
corner.Parent = menu

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Padding = UDim.new(0, 5)
uiListLayout.FillDirection = Enum.FillDirection.Vertical
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiListLayout.Parent = menu

local padding = Instance.new("UIPadding")
padding.PaddingLeft = UDim.new(0, 10)
padding.PaddingRight = UDim.new(0, 10)
padding.PaddingTop = UDim.new(0, 10)
padding.Parent = menu

local playerEspFrame = Instance.new("Frame")
playerEspFrame.Size = UDim2.new(1, 0, 1, -40)
playerEspFrame.BackgroundTransparency = 1
playerEspFrame.Visible = true
playerEspFrame.Parent = menu

local function createToggleButton(name, enabled, callback, parent)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 24)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local layout = Instance.new("UIListLayout")
    layout.FillDirection = Enum.FillDirection.Horizontal
    layout.VerticalAlignment = Enum.VerticalAlignment.Center
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 8)
    layout.Parent = container

    local label = Instance.new("TextLabel")
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.65, 0, 1, 0)
    label.LayoutOrder = 1
    label.Parent = container

    local button = Instance.new("TextButton")
    button.Text = enabled and "On" or "Off"
    button.Font = Enum.Font.GothamBold
    button.TextSize = 12
    button.Size = UDim2.new(0.3, 0, 0, 18)
    button.BackgroundColor3 = enabled and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.LayoutOrder = 2
    button.Parent = container

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(244, 73, 255)
    stroke.Thickness = 1
    stroke.Parent = button

    local buttonConn = button.MouseButton1Click:Connect(function()
        enabled = not enabled
        button.Text = enabled and "On" or "Off"
        button.BackgroundColor3 = enabled and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
        callback(enabled)
    end)
    table.insert(connections, buttonConn)

    return container, button
end

local function createButton(name, callback, parent)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.48, 0, 0, 24)
    button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    button.Text = name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 12
    button.Parent = parent

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(244, 73, 255)
    stroke.Thickness = 1
    stroke.Parent = button

    local buttonConn = button.MouseButton1Click:Connect(callback)
    table.insert(connections, buttonConn)

    return button
end

local playerListLayout = Instance.new("UIListLayout")
playerListLayout.Padding = UDim.new(0, 5)
playerListLayout.FillDirection = Enum.FillDirection.Vertical
playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
playerListLayout.Parent = playerEspFrame

createToggleButton("Player ESP", PLAYER_ESP_SETTINGS.enabled, function(state)
    PLAYER_ESP_SETTINGS.enabled = state
    saveSettings()
end, playerEspFrame)

createToggleButton("Name", PLAYER_ESP_SETTINGS.name, function(state)
    PLAYER_ESP_SETTINGS.name = state
    saveSettings()
end, playerEspFrame)

createToggleButton("Highlight", PLAYER_ESP_SETTINGS.highlight, function(state)
    PLAYER_ESP_SETTINGS.highlight = state
    saveSettings()
end, playerEspFrame)

createToggleButton("Health", PLAYER_ESP_SETTINGS.health, function(state)
    PLAYER_ESP_SETTINGS.health = state
    saveSettings()
end, playerEspFrame)

createToggleButton("Distance", PLAYER_ESP_SETTINGS.distance, function(state)
    PLAYER_ESP_SETTINGS.distance = state
    saveSettings()
end, playerEspFrame)

local textBoxFrame = Instance.new("Frame")
textBoxFrame.Size = UDim2.new(1, 0, 0, 24)
textBoxFrame.BackgroundTransparency = 1
textBoxFrame.Parent = playerEspFrame

local textBoxLabel = Instance.new("TextLabel")
textBoxLabel.Size = UDim2.new(0.65, 0, 1, 0)
textBoxLabel.BackgroundTransparency = 1
textBoxLabel.Text = "Player Name:"
textBoxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textBoxLabel.Font = Enum.Font.Gotham
textBoxLabel.TextSize = 14
textBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
textBoxLabel.Parent = textBoxFrame

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.295, 0, 0, 18)
textBox.Position = UDim2.new(0.685, 0, 0, 3)
textBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.Font = Enum.Font.Gotham
textBox.TextSize = 12
textBox.PlaceholderText = "Enter name"
textBox.Text = ""
textBox.Parent = textBoxFrame

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(244, 73, 255)
stroke.Thickness = 1
stroke.Parent = textBox

local dropdownFrame = Instance.new("Frame")
dropdownFrame.ZIndex = 2
dropdownFrame.Size = UDim2.new(0.3, 0, 0, 0)
dropdownFrame.Position = UDim2.new(1, 0, 0.15, 0)
dropdownFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
dropdownFrame.BackgroundTransparency = 0.1
dropdownFrame.Visible = false
dropdownFrame.Parent = textBoxFrame

local dropdownStroke = Instance.new("UIStroke")
dropdownStroke.Color = Color3.fromRGB(244, 73, 255)
dropdownStroke.Thickness = 1
dropdownStroke.Parent = dropdownFrame

local dropdownLayout = Instance.new("UIListLayout")
dropdownLayout.FillDirection = Enum.FillDirection.Vertical
dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
dropdownLayout.Padding = UDim.new(0, 2)
dropdownLayout.Parent = dropdownFrame

local dropdownPadding = Instance.new("UIPadding")
dropdownPadding.PaddingTop = UDim.new(0, 1)
dropdownPadding.PaddingLeft = UDim.new(0, 2)
dropdownPadding.PaddingBottom = UDim.new(0, 2)
dropdownPadding.Parent = dropdownFrame

local function updateAutocomplete(input)
    for _, child in ipairs(dropdownFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    dropdownFrame.Size = UDim2.new(0.3, 0, 0, 0)
    dropdownFrame.ZIndex = 4

    local suggestions = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if input == "" or string.match(player.Name:lower(), "^" .. input:lower()) then
                table.insert(suggestions, player.Name)
            end
        end
    end
    table.sort(suggestions, function(a, b) return a:lower() < b:lower() end)

    local height = 0
    for i, name in ipairs(suggestions) do
        local suggestionButton = Instance.new("TextButton")
        suggestionButton.ZIndex = 4
        suggestionButton.Size = UDim2.new(0.95, 0, 0, 20)
        suggestionButton.BackgroundColor3 = i == 1 and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)
        suggestionButton.Text = name
        suggestionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        suggestionButton.Font = Enum.Font.Gotham
        suggestionButton.TextSize = 12
        suggestionButton.TextXAlignment = Enum.TextXAlignment.Left
        suggestionButton.Parent = dropdownFrame

        local buttonStroke = Instance.new("UIStroke")
        buttonStroke.Color = Color3.fromRGB(244, 73, 255)
        buttonStroke.Thickness = 1
        buttonStroke.Parent = suggestionButton

        local conn = suggestionButton.MouseButton1Click:Connect(function()
            if textBox then
                textBox.Text = name
                dropdownFrame.Visible = false
            end
        end)
        table.insert(connections, conn)
        height = height + 22
    end
    dropdownFrame.Size = UDim2.new(0.3, 0, 0, height)
    dropdownFrame.Visible = #suggestions > 0
end

table.insert(connections, textBox.Focused:Connect(function()
    updateAutocomplete(textBox.Text)
end))

table.insert(connections, textBox.FocusLost:Connect(function()
    wait(0.1)
    dropdownFrame.Visible = false
end))

table.insert(connections, textBox:GetPropertyChangedSignal("Text"):Connect(function()
    updateAutocomplete(textBox.Text)
end))

table.insert(connections, UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or input.KeyCode ~= Enum.KeyCode.Tab then return end
    if dropdownFrame.Visible and #dropdownFrame:GetChildren() > 2 then
        local firstSuggestion = dropdownFrame:GetChildren()[3]
        if firstSuggestion:IsA("TextButton") then
            textBox.Text = firstSuggestion.Text
            dropdownFrame.Visible = false
        end
    end
end))

local buttonContainer = Instance.new("Frame")
buttonContainer.Size = UDim2.new(1, 0, 0, 54)
buttonContainer.BackgroundTransparency = 1
buttonContainer.Parent = playerEspFrame

local buttonLayout = Instance.new("UIListLayout")
buttonLayout.FillDirection = Enum.FillDirection.Vertical
buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
buttonLayout.Padding = UDim.new(0, 5)
buttonLayout.Parent = buttonContainer

local topButtonRow = Instance.new("Frame")
topButtonRow.Size = UDim2.new(1, 0, 0, 24)
topButtonRow.BackgroundTransparency = 1
topButtonRow.Parent = buttonContainer

local topButtonLayout = Instance.new("UIListLayout")
topButtonLayout.FillDirection = Enum.FillDirection.Horizontal
topButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
topButtonLayout.Padding = UDim.new(0, 5)
topButtonLayout.Parent = topButtonRow

local bottomButtonRow = Instance.new("Frame")
bottomButtonRow.Size = UDim2.new(1, 0, 0, 24)
bottomButtonRow.BackgroundTransparency = 1
bottomButtonRow.Parent = buttonContainer

local bottomButtonLayout = Instance.new("UIListLayout")
bottomButtonLayout.FillDirection = Enum.FillDirection.Horizontal
bottomButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
bottomButtonLayout.Padding = UDim.new(0, 5)
bottomButtonLayout.Parent = bottomButtonRow

local showButtonContainer = Instance.new("Frame")
showButtonContainer.Size = UDim2.new(1, 0, 0, 24)
showButtonContainer.BackgroundTransparency = 1
showButtonContainer.Parent = playerEspFrame

local showButtonLayout = Instance.new("UIListLayout")
showButtonLayout.FillDirection = Enum.FillDirection.Horizontal
showButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
showButtonLayout.Padding = UDim.new(0, 5)
showButtonLayout.Parent = showButtonContainer

local function updateESPForPlayer(name, color)
    local data = PLAYER_ESP_SETTINGS.players[name]
    if data and data.billboard then
        data.billboard.Frame.TextLabel.TextColor3 = color
        if color == Color3.fromRGB(255, 0, 0) then
            data.billboard.ExtentsOffset = Vector3.new(0, 1, 0)
            data.billboard.Size = UDim2.new(3, 60, 1.5, 60)
        else
            data.billboard.ExtentsOffset = Vector3.new(0, 0, 0)
            data.billboard.Size = UDim2.new(3, 0, 1.5, 0)
        end
        if data.highlight then
            data.highlight.FillColor = color
            data.highlight.OutlineColor = color
        end
    end
end

local function updateAllLists()
    for frameId, frameData in pairs(activeListFrames) do
        if frameData.updateFunc then
            frameData.updateFunc()
        end
    end
end

createButton("Add Friend", function()
    local name = textBox.Text
    if name ~= "" then
        if not table.find(PLAYER_ESP_SETTINGS.friends, name) and not table.find(PLAYER_ESP_SETTINGS.enemies, name) then
            table.insert(PLAYER_ESP_SETTINGS.friends, name)
            saveSettings()
            updateESPForPlayer(name, Color3.fromRGB(0, 255, 0))
            updateAllLists()
        end
    end
end, topButtonRow)

createButton("Add Enemy", function()
    local name = textBox.Text
    if name ~= "" then
        if not table.find(PLAYER_ESP_SETTINGS.enemies, name) and not table.find(PLAYER_ESP_SETTINGS.friends, name) then
            table.insert(PLAYER_ESP_SETTINGS.enemies, name)
            saveSettings()
            updateESPForPlayer(name, Color3.fromRGB(255, 0, 0))
            updateAllLists()
        end
    end
end, topButtonRow)

createButton("Remove Friend", function()
    local name = textBox.Text
    if name ~= "" then
        local index = table.find(PLAYER_ESP_SETTINGS.friends, name)
        if index then
            table.remove(PLAYER_ESP_SETTINGS.friends, index)
            saveSettings()
            updateESPForPlayer(name, Color3.fromRGB(255, 255, 255))
            updateAllLists()
        end
    end
end, bottomButtonRow)

createButton("Remove Enemy", function()
    local name = textBox.Text
    if name ~= "" then
        local index = table.find(PLAYER_ESP_SETTINGS.enemies, name)
        if index then
            table.remove(PLAYER_ESP_SETTINGS.enemies, index)
            saveSettings()
            updateESPForPlayer(name, Color3.fromRGB(255, 255, 255))
            updateAllLists()
        end
    end
end, bottomButtonRow)

local function showList(list, title, listType)
    for frameId, frameData in pairs(activeListFrames) do
        if frameData.type == listType then
            if frameData.frame then
                frameData.frame:Destroy()
            end
            activeListFrames[frameId] = nil
        end
    end

    local sortedList = {table.unpack(list)}
    table.sort(sortedList, function(a, b) return a:lower() < b:lower() end)

    local outerFrame = Instance.new("Frame")
    local frameId = HttpService:GenerateGUID(false)
    outerFrame.Name = "LIST_" .. listType
    outerFrame.Size = UDim2.new(0.125, 0, 0.25, 0)
    outerFrame.Position = UDim2.new(0.7, 0, 0.7, 0)
    outerFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    outerFrame.BackgroundTransparency = 0.1
    outerFrame.Active = true
    outerFrame.Draggable = true
    outerFrame.Parent = gui

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(244, 73, 255)
    stroke.Thickness = 2
    stroke.Parent = outerFrame

    local outerLayout = Instance.new("UIListLayout")
    outerLayout.FillDirection = Enum.FillDirection.Vertical
    outerLayout.SortOrder = Enum.SortOrder.LayoutOrder
    outerLayout.Padding = UDim.new(0, 5)
    outerLayout.Parent = outerFrame

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.Parent = outerFrame

    local listFrame = Instance.new("ScrollingFrame")
    listFrame.Size = UDim2.new(0.9, 0, 0.85, 0)
    listFrame.BackgroundTransparency = 1
    listFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    listFrame.ScrollBarThickness = 6
    listFrame.ScrollBarImageColor3 = Color3.fromRGB(244, 73, 255)
    listFrame.Parent = outerFrame

    local listLayout = Instance.new("UIListLayout")
    listLayout.FillDirection = Enum.FillDirection.Vertical
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = listFrame

    local scrollPadding = Instance.new("UIPadding")
    scrollPadding.PaddingTop = UDim.new(0, 5)
    scrollPadding.PaddingLeft = UDim.new(0, 5)
    scrollPadding.PaddingRight = UDim.new(0, 5)
    scrollPadding.Parent = listFrame

    local function updateList()
        for _, child in ipairs(listFrame:GetChildren()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("Frame") then
                child:Destroy()
            end
        end

        sortedList = {table.unpack(list)}
        table.sort(sortedList, function(a, b) return a:lower() < b:lower() end)

        local height = 30

        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0, 20)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.TextSize = 14
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Parent = listFrame

        for i, name in ipairs(sortedList) do
            local entryFrame = Instance.new("Frame")
            entryFrame.Size = UDim2.new(0.95, 0, 0, 20)
            entryFrame.BackgroundTransparency = 1
            entryFrame.Parent = listFrame

            local entryLayout = Instance.new("UIListLayout")
            entryLayout.FillDirection = Enum.FillDirection.Horizontal
            entryLayout.SortOrder = Enum.SortOrder.LayoutOrder
            entryLayout.Padding = UDim.new(0, 5)
            entryLayout.Parent = entryFrame

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Size = UDim2.new(0.7, 0, 1, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.Text = tostring(i) .. ". " .. name
            nameLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            nameLabel.Font = Enum.Font.Gotham
            nameLabel.TextSize = 12
            nameLabel.TextXAlignment = Enum.TextXAlignment.Left
            nameLabel.Parent = entryFrame

            local removeButton = Instance.new("TextButton")
            removeButton.Size = UDim2.new(0.3, -5, 0, 18)
            removeButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
            removeButton.Text = "Remove"
            removeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            removeButton.Font = Enum.Font.GothamBold
            removeButton.TextSize = 10
            removeButton.Parent = entryFrame

            local stroke = Instance.new("UIStroke")
            stroke.Color = Color3.fromRGB(244, 73, 255)
            stroke.Thickness = 1
            stroke.Parent = removeButton

            local conn = removeButton.MouseButton1Click:Connect(function()
                local index = table.find(list, name)
                if index then
                    table.remove(list, index)
                    saveSettings()
                    updateESPForPlayer(name, Color3.fromRGB(255, 255, 255))
                    updateAllLists()
                end
            end)
            table.insert(connections, conn)
            height = height + 25
        end

        listFrame.CanvasSize = UDim2.new(0, 0, 0, height)
    end

    local okButton = Instance.new("TextButton")
    okButton.Size = UDim2.new(0.2, 0, 0.075, 0)
    okButton.Position = UDim2.new(0.1, 0, 0.9, 0)
    okButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    okButton.Text = "OK"
    okButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    okButton.Font = Enum.Font.GothamBold
    okButton.TextSize = 12
    okButton.Parent = outerFrame

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(244, 73, 255)
    stroke.Thickness = 1
    stroke.Parent = okButton

    local conn = okButton.MouseButton1Click:Connect(function()
        outerFrame:Destroy()
        activeListFrames[frameId] = nil
    end)
    table.insert(connections, conn)

    updateList()
    activeListFrames[frameId] = { type = listType, frame = outerFrame, updateFunc = updateList }
end

createButton("Show Friends", function()
    showList(PLAYER_ESP_SETTINGS.friends, "Friends", "Friends")
end, showButtonContainer)

createButton("Show Enemies", function()
    showList(PLAYER_ESP_SETTINGS.enemies, "Enemies", "Enemies")
end, showButtonContainer)

local function createSlider(parent, labelText, maxValue, defaultValue, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(1, 0, 0, 40)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent

    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, 0, 0, 16)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = labelText .. ": " .. tostring(defaultValue)
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextSize = 14
    sliderLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0, 8)
    sliderBar.Position = UDim2.new(0, 0, 0, 20)
    sliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    sliderBar.Parent = sliderFrame

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(244, 73, 255)
    stroke.Thickness = 1
    stroke.Parent = sliderBar

    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(defaultValue / maxValue, 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    sliderFill.Parent = sliderBar

    local fillStroke = Instance.new("UIStroke")
    fillStroke.Color = Color3.fromRGB(244, 73, 255)
    fillStroke.Thickness = 1
    fillStroke.Parent = sliderFill

    local dragging = false
    local inputBeganConn = sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            menu.Active = false
            local mouse = LocalPlayer:GetMouse()
            local function updateSlider()
                local relativeX = math.clamp(mouse.X - sliderBar.AbsolutePosition.X, 0, sliderBar.AbsoluteSize.X)
                local percent = relativeX / sliderBar.AbsoluteSize.X
                local value = math.floor(50 + percent * (maxValue - 50))
                sliderLabel.Text = labelText .. ": " .. tostring(value)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                callback(value)
            end
            updateSlider()
            local moveConn
            moveConn = mouse.Move:Connect(function()
                if dragging then
                    updateSlider()
                else
                    moveConn:Disconnect()
                end
            end)
            local upConn
            upConn = UserInputService.InputEnded:Connect(function(inputEnded)
                if inputEnded.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    menu.Active = true
                    moveConn:Disconnect()
                    upConn:Disconnect()
                end
            end)
            table.insert(connections, moveConn)
            table.insert(connections, upConn)
        end
    end)
    table.insert(connections, inputBeganConn)
    return sliderFrame
end

createSlider(playerEspFrame, "Radius", 1500, PLAYER_ESP_SETTINGS.distanceValue, function(value)
    PLAYER_ESP_SETTINGS.distanceValue = value
    saveSettings()
end)

local function createESPBox(name, color, parentPart)
    local highlightId = HttpService:GenerateGUID(false)
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_" .. name .. "_" .. highlightId
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.FillTransparency = 1
    highlight.OutlineTransparency = 0.7
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Enabled = false
    highlight.Parent = gui

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_UI_" .. name .. "_" .. highlightId
    billboard.ResetOnSpawn = false
    billboard.AlwaysOnTop = true
    if color == Color3.fromRGB(255, 0, 0) then
        billboard.ExtentsOffset = Vector3.new(0, 1, 0)
        billboard.Size = UDim2.new(3, 60, 1.5, 60)
    else
        billboard.ExtentsOffset = Vector3.new(0, 0, 0)
        billboard.Size = UDim2.new(3, 0, 1.5, 0)
    end
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.Adornee = parentPart
    billboard.Parent = parentPart
    billboard.Enabled = false

    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 1
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.ZIndex = 2
    frame.Parent = billboard

    local label = Instance.new("TextLabel")
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0.5
    label.Text = name
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.ZIndex = 3
    label.Parent = frame

    local healthBillboard = Instance.new("BillboardGui")
    healthBillboard.Name = "ESP_Health_" .. name .. "_" .. highlightId
    healthBillboard.AlwaysOnTop = true
    healthBillboard.ResetOnSpawn = false
    healthBillboard.Size = UDim2.new(0.2, 0, 5, 0)
    healthBillboard.StudsOffset = Vector3.new(-2, 0, 0)
    healthBillboard.Adornee = parentPart
    healthBillboard.Parent = parentPart
    healthBillboard.Enabled = false

    local healthBack = Instance.new("Frame")
    healthBack.BorderColor3 = Color3.fromRGB(100, 0, 100)
    healthBack.Size = UDim2.new(1.1, 0, 1.005, 0)
    healthBack.Position = UDim2.new(-0.05, 0, -0.0025, 0)
    healthBack.BackgroundColor3 = Color3.fromRGB(0, 0, 35)
    healthBack.BackgroundTransparency = 0.5
    healthBack.ZIndex = 2
    healthBack.Parent = healthBillboard

    local healthFrame = Instance.new("Frame")
    healthFrame.Size = UDim2.new(1, 0, 1, 0)
    healthFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthFrame.BackgroundTransparency = 0.5
    healthFrame.ZIndex = 2
    healthFrame.Parent = healthBillboard

    return billboard, label, healthFrame, highlight, highlightId, healthBillboard
end

local function getColor(plr)
    if table.find(PLAYER_ESP_SETTINGS.friends, plr.Name) then
        return Color3.fromRGB(0, 255, 0)
    elseif table.find(PLAYER_ESP_SETTINGS.enemies, plr.Name) then
        return Color3.fromRGB(255, 0, 0)
    else
        if plr.TeamColor.Color then
            return plr.TeamColor.Color
        else
            return Color3.fromRGB(255, 255, 255)
        end
    end
end

local function cleanupPlayerESP(name)
    local data = PLAYER_ESP_SETTINGS.players[name]
    if data then
        if data.billboard then
            data.billboard:Destroy()
        end
        if data.healthBillboard then
            data.healthBillboard:Destroy()
        end
        if data.highlight then
            data.highlight:Destroy()
        end
        PLAYER_ESP_SETTINGS.players[name] = nil
    end
end

local function addPlayer(player)
    if player == LocalPlayer then return end
    cleanupPlayerESP(player.Name)
    local function setupPlayerESP(character)
        if not character then return end
        if activeSetupCoroutines[player.Name] then return end
        activeSetupCoroutines[player.Name] = true

        local success, err = pcall(function()
            local humanoid = character:WaitForChild("Humanoid", 5)
            local rootPart = character:WaitForChild("HumanoidRootPart", 5)
            if not humanoid or not rootPart then
                warn("Humanoid or HumanoidRootPart not found for player " .. player.Name)
                return
            end
            cleanupPlayerESP(player.Name)
            local billboard, label, healthFrame, highlight, highlightId, healthBillboard = createESPBox(player.Name, getColor(player), rootPart)
            highlight.Adornee = character
            PLAYER_ESP_SETTINGS.players[player.Name] = {
                player = player,
                billboard = billboard,
                label = label,
                healthFrame = healthFrame,
                highlight = highlight,
                highlightId = highlightId,
                character = character,
                healthBillboard = healthBillboard
            }
        end)
        activeSetupCoroutines[player.Name] = nil
        if not success then
            warn("Error setting up ESP for player " .. player.Name .. ": " .. tostring(err))
        end
    end
    if player.Character then
        setupPlayerESP(player.Character)
    end
    local characterConn = player.CharacterAdded:Connect(function(newCharacter)
        cleanupPlayerESP(player.Name)
        setupPlayerESP(newCharacter)
    end)
    table.insert(connections, characterConn)
end

local function cleanPlayers()
    for name, data in pairs(PLAYER_ESP_SETTINGS.players) do
        if not data.player or not data.player.Parent or not data.player.Character then
            cleanupPlayerESP(name)
        end
    end
end

local function updateESP()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local cameraPos = LocalPlayer.Character.HumanoidRootPart.CFrame.Position
    if PLAYER_ESP_SETTINGS.enabled then
        for name, data in pairs(PLAYER_ESP_SETTINGS.players) do
            data.billboard.Frame.TextLabel.TextColor3 = getColor(data.player)
            data.highlight.FillColor = getColor(data.player)
            data.highlight.OutlineColor = getColor(data.player)
            local character = data.player and data.player.Character
            if not character or not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
                if data.billboard then
                    data.billboard.Enabled = false
                end
                if data.healthBillboard then
                    data.healthBillboard.Enabled = false
                end
                if data.highlight then
                    data.highlight.Enabled = false
                end
                continue
            end
            local humanoid = character.Humanoid
            local rootPart = character.HumanoidRootPart
            local dist = (cameraPos - rootPart.Position).Magnitude
            if dist > PLAYER_ESP_SETTINGS.distanceValue then
                data.billboard.Enabled = false
                data.healthBillboard.Enabled = false
                data.highlight.Enabled = false
                continue
            end
            if data.highlight and data.highlight.Adornee ~= character then
                data.highlight.Adornee = character
            end
            data.billboard.Enabled = PLAYER_ESP_SETTINGS.name
            data.healthBillboard.Enabled = PLAYER_ESP_SETTINGS.health
            data.label.Visible = PLAYER_ESP_SETTINGS.name
            data.highlight.Enabled = PLAYER_ESP_SETTINGS.highlight
            if PLAYER_ESP_SETTINGS.health and humanoid and humanoid.Health and humanoid.MaxHealth then
                data.healthFrame.Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0)
                data.healthFrame.BackgroundColor3 = Color3.fromRGB(
                    255 * (1 - humanoid.Health / humanoid.MaxHealth),
                    255 * (humanoid.Health / humanoid.MaxHealth),
                    0
                )
            end
            data.label.Text = PLAYER_ESP_SETTINGS.distance and name .. " [" .. math.floor(dist) .. "m]" or name
        end
    else
        for _, data in pairs(PLAYER_ESP_SETTINGS.players) do
            if data.billboard then
                data.billboard.Enabled = false
            end
            if data.healthBillboard then
                data.healthBillboard.Enabled = false
            end
            if data.highlight then
                data.highlight.Enabled = false
            end
        end
    end
end

createButton("Remove Script", function()
    for _, conn in ipairs(connections) do
        conn:Disconnect()
    end
    connections = {}
    for _, data in pairs(PLAYER_ESP_SETTINGS.players) do
        if data.billboard then
            data.billboard:Destroy()
        end
        if data.healthBillboard then
            data.healthBillboard:Destroy()
        end
        if data.highlight then
            data.highlight:Destroy()
        end
    end
    PLAYER_ESP_SETTINGS.players = {}
    for _, frameData in pairs(activeListFrames) do
        if frameData.frame then
            frameData.frame:Destroy()
        end
    end
    activeListFrames = {}
    if gui then
        gui:Destroy()
    end
end, playerEspFrame)

table.insert(connections, UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.U then
        menu.Visible = not menu.Visible
    end
end))

for _, player in ipairs(Players:GetPlayers()) do
    addPlayer(player)
end
table.insert(connections, Players.PlayerAdded:Connect(addPlayer))
table.insert(connections, Players.PlayerRemoving:Connect(function(player)
    cleanupPlayerESP(player.Name)
end))

local lastESPUpdate = 0
local ESP_UPDATE_INTERVAL = 0.5

table.insert(connections, RunService.Heartbeat:Connect(function()
    local currentTime = tick()
    if currentTime - lastESPUpdate >= ESP_UPDATE_INTERVAL then
        cleanPlayers()
        updateESP()
        lastESPUpdate = currentTime
    end
end))
